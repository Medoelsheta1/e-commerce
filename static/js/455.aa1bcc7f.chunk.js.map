{"version":3,"file":"static/js/455.aa1bcc7f.chunk.js","mappings":"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","sources":["Components/Forms/LayoutForm.js","Components/hooks/useInput.js","Components/inputs/Inpute.js","Components/Forms/LoginForm.js","pages/Login.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst LayoutForm = (props) => {\r\n    return (\r\n        <div className='form-content mb-4 rounded'>\r\n            <h1 className='text-white '>{props.header}</h1>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LayoutForm","import { useState } from \"react\"\r\n\r\n\r\nconst useInput = (validFun) => {\r\n    const [input , setInput] = useState('')\r\n    const [inInputTouched , setIsInputTouched] = useState(false)\r\n    const isInputValid = validFun(input)\r\n\r\n    const inputHandler = (e) => {\r\n\r\n        setIsInputTouched(true)\r\n        setInput(e.target.value)\r\n    }\r\n    const inputBlurHandler = () => {\r\n\r\n        setIsInputTouched(true)\r\n    }\r\n    const resetInput =() => {\r\n        setInput('')\r\n        setIsInputTouched(false)\r\n    }\r\n    return {\r\n        value: input,\r\n        isTouched: inInputTouched,\r\n        isValid: isInputValid,\r\n        reset: resetInput,\r\n        inputHandler,\r\n        inputBlurHandler\r\n    }\r\n}\r\n\r\nexport default useInput","import React from 'react'\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <div className='input'> \r\n        <label className='me-2 fs-5 mb-1' htmlFor={props.name} >{props.label}</label>\r\n        <input className={`p-3 rounded w-100 ${props.isValueTouched && !props.isValueValid && 'bg-danger'}`} type={props.type} name={props.name} id={props.name} \r\n        onBlur={props.blurFunction} onChange={props.handleFunction} value={props.value}/>\r\n        { props.isValueTouched && !props.isValueValid && <p className='text-danger mt-1'>{props.message}</p>}\r\n    </div>   \r\n    )\r\n}\r\n\r\nexport default Input","\r\nimport { Link } from 'react-router-dom'\r\nimport useInput from '../hooks/useInput';\r\nimport LayoutForm from './LayoutForm';\r\nimport axios from 'axios';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AdduserData, LogIn  } from '../RTK/Slices/CartSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { ToastContainer , toast } from 'react-toastify';\r\nimport Loader from '../Loaders/Loader'\r\nimport Inpute from '../inputs/Inpute'\r\n\r\nconst LoginForm = () => {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const [loading , setLoading] = useState(false)\r\n    const [faildLogin , setFaildLogin] = useState(false)\r\n    const {value: email ,  isTouched: isEmailTouched ,\r\n        isValid: isEmailValid  ,\r\n        inputHandler: emailInputHandler , inputBlurHandler: emailBlurHandler \r\n    } = useInput( value => value.trim() !== '')\r\n    const {value: pass ,  isTouched: isPassTouched ,\r\n        isValid: isPassValid  ,\r\n        inputHandler: passInputHandler , inputBlurHandler: passBlurHandler \r\n    } = useInput( value => value.trim() !== '')\r\n    let formValidate = false\r\n    if (isEmailValid && isPassValid) {\r\n        formValidate = true\r\n    }\r\n    const submitFormHandler = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n        if (!formValidate) {\r\n            setLoading(false)\r\n            return;\r\n        }\r\n        try {\r\n            const res = await axios.post('https://e-commerce-hh3m.onrender.com/api/logIn' , {\r\n                email: email,\r\n                password: pass,\r\n                returnSecureToken: true\r\n            })\r\n            dispatch(LogIn(res.data.data.token))\r\n            dispatch(AdduserData({\r\n                email: email,\r\n                id: res.data.data.id,\r\n                role: res.data.data.role,\r\n            }))\r\n            toast.success('Login successfully')\r\n            navigate('/')               \r\n            \r\n        \r\n        }catch(err) {\r\n            setFaildLogin(true)\r\n        }\r\n        setLoading(false)\r\n    }\r\n    return (\r\n        <>\r\n        <LayoutForm header='Login' >\r\n            <form className='form w-100 p-4 text-white' onSubmit={submitFormHandler}>\r\n            <Inpute name={'email'} label={'Email'} type='text' message={\"Your email Cant be empty\"} value={email} isValueTouched={isEmailTouched} \r\n                isValueValid={isEmailValid} handleFunction={emailInputHandler} blurFunction={emailBlurHandler}/>\r\n            <Inpute name={'pass'} label={'Password'} type='password' message={\"Your pass Cant be empty\"} value={pass} isValueTouched={isPassTouched} \r\n                isValueValid={isPassValid} handleFunction={passInputHandler} blurFunction={passBlurHandler}/>\r\n                <div className='d-flex justify-content-between align-items-center'>\r\n                    <Link className=' forget text-white d-flex  mt-3'>Forget password?</Link>           \r\n                </div>\r\n                {faildLogin && <p className='text-danger'>Your userName or password is incorrect</p>}\r\n                <p className='text-danger'>to login as a admin email: admin@yahoo.com || pass: admin</p>\r\n                <div className='buttons'>\r\n                    <button className='btn btn-lg btn-primary d-block w-100 mt-3'>Login</button>\r\n                    <Link to='/signup' className='text-white'><button className='btn btn-lg btn-dark d-block w-100 mt-3'>SignUp</button></Link>\r\n                </div>\r\n            </form>\r\n        </LayoutForm>     \r\n        <ToastContainer\r\n        position=\"top-left\"\r\n        autoClose={1000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"dark\"\r\n        />   \r\n        {loading && <Loader />}\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport LoginForm from '../Components/Forms/LoginForm'\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div className='login'>\r\n            <LoginForm />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login"],"names":["props","_jsxs","className","children","_jsx","header","validFun","input","setInput","useState","inInputTouched","setIsInputTouched","value","isTouched","isValid","reset","resetInput","inputHandler","e","target","inputBlurHandler","htmlFor","name","label","concat","isValueTouched","isValueValid","type","id","onBlur","blurFunction","onChange","handleFunction","message","LoginForm","navigate","useNavigate","dispatch","useDispatch","loading","setLoading","faildLogin","setFaildLogin","email","isEmailTouched","isEmailValid","emailInputHandler","emailBlurHandler","useInput","trim","pass","isPassTouched","isPassValid","passInputHandler","passBlurHandler","formValidate","_Fragment","LayoutForm","onSubmit","async","preventDefault","res","axios","post","password","returnSecureToken","LogIn","data","token","AdduserData","role","toast","success","err","Inpute","Link","to","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","Loader","Login"],"sourceRoot":""}